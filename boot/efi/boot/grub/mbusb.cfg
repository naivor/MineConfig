# Partition holding files
probe -u $root --set=rootuuid
set imgdevpath="/dev/disk/by-uuid/$rootuuid"
export imgdevpath rootuuid

# Custom variables
set isopath="/iso"
export isopath

# Load modules
insmod regexp
insmod all_video
insmod jpeg
insmod png
insmod fat
# MultiBoot USB menu
submenu "Multiboot Tools    ->" --class memtest {
  set theme=$subtheme
  # Warning for 32-bit systems
  if ! cpuid -l; then
    clear
    echo "This is a 32-bit computer."
    echo "You won't get to use 64-bit software on it."
    echo
    echo -n "To continue, press ESC or wait 10 seconds... "
    sleep --interruptible 10
    echo
    echo
  fi

  # Load custom configuration
  if [ -e "$prefix/isos.cfg" ]; then
    source "$prefix/isos.cfg"
  fi


  # Load configuration files
  #echo -n "Loading configuration files... "
  #for cfgfile in $prefix/mbusb.d/*.d/*.cfg; do
  #  source "$cfgfile"
  #done

submenu 'Deepin GNU/Linux Advanced' --class gnu-linux $menuentry_id_option 'gnulinux-advanced-ddb60902-cbe0-4304-ba62-c7f92083f496' {
	set theme=$subtheme
	
	### BEGIN /etc/grub.d/15_linux_bar ###
	menuentry 'Deepin GNU/Linux，Linux stable-amd64-desktop' --class deepin --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-5.10.50-amd64-desktop-advanced-ddb60902-cbe0-4304-ba62-c7f92083f496' {
		load_video
		insmod gzio
		if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi
		insmod part_gpt
		insmod ext2
		set root='hd0,gpt4'
		if [ x$feature_platform_search_hint = xy ]; then
		  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt4 --hint-efi=hd0,gpt4 --hint-baremetal=ahci0,gpt4  ddb60902-cbe0-4304-ba62-c7f92083f496
		else
		  search --no-floppy --fs-uuid --set=root ddb60902-cbe0-4304-ba62-c7f92083f496
		fi
		linux	/boot/vmlinuz-stable root=UUID=ddb60902-cbe0-4304-ba62-c7f92083f496 ro  splash quiet snd_hda_intel.dmic_detect=0 DEEPIN_GFXMODE=$DEEPIN_GFXMODE
		initrd	/boot/initrd.img-stable
		boot 
	}

	menuentry 'Deepin GNU/Linux，Linux old-stable-amd64-desktop' --class deepin --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-5.10.50-amd64-desktop-advanced-ddb60902-cbe0-4304-ba62-c7f92083f496' {
		load_video
		insmod gzio
		if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi
		insmod part_gpt
		insmod ext2
		set root='hd0,gpt4'
		if [ x$feature_platform_search_hint = xy ]; then
		  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt4 --hint-efi=hd0,gpt4 --hint-baremetal=ahci0,gpt4  ddb60902-cbe0-4304-ba62-c7f92083f496
		else
		  search --no-floppy --fs-uuid --set=root ddb60902-cbe0-4304-ba62-c7f92083f496
		fi
		linux	/boot/vmlinuz-old root=UUID=ddb60902-cbe0-4304-ba62-c7f92083f496 ro  splash quiet snd_hda_intel.dmic_detect=0 DEEPIN_GFXMODE=$DEEPIN_GFXMODE
		initrd	/boot/initrd.img-old
		boot 
	}
	### END /etc/grub.d/15_linux_bar ###

	### BEGIN /etc/grub.d/11_deepin_ab_recovery ###
	### END /etc/grub.d/11_deepin_ab_recovery ###
}

#### BEGIN /etc/grub.d/01_live ###

menuentry "Deepin Live " --class recovery --class deepin --class linux {
    set iso=/iso/deepin-live.iso
    search --file --set=root --no-floppy $iso

    echo "Loopback iso file: $iso"
    loopback loop $iso
    linux (loop)/live/vmlinuz boot=live findiso=${iso} components quiet splash locales=zh_CN.UTF-8
    initrd (loop)/live/initrd.img
}
#### END  /etc/grub.d/01_live ###


# Grub options
submenu "GRUB2 options ->" --class driver {
  set theme=$subtheme

  menuentry "List devices/partitions" {
    ls -l
    sleep --interruptible 9999
  }

  menuentry "Enable GRUB2's LVM support" {
    insmod lvm
  }

  menuentry "Enable GRUB2's RAID support" {
    insmod dm_nv
    insmod mdraid09_be
    insmod mdraid09
    insmod mdraid1x
    insmod raid5rec
    insmod raid6rec
  }

  menuentry "Enable GRUB2's PATA support (to work around BIOS bugs/limitations)" {
    insmod ata
    update_paths
  }

  menuentry "Enable GRUB2's USB support *experimental*" {
    insmod ohci
    insmod uhci
    insmod usbms
    update_paths
  }

  menuentry "Mount encrypted volumes (LUKS and geli)" {
    insmod luks
    insmod geli
    cryptomount -a
  }

  menuentry "Enable serial terminal" {
    serial
    terminal_input --append serial
    terminal_output --append serial
  }
}

# Explore file
menuentry "File Explore ->" --class find.efi {

  if [ "$grub_platform"=="efi" ];then
     chainloader $prefix/fmg/grubfmx64.efi
  else 
      linux $prefix/fmg/loadfm
      initrd $prefix/fmg/grubfm.iso
  fi
}

# Reboot
menuentry "Reboot" --class restart {
  reboot
}
# Poweroff
menuentry "Poweroff" --class shutdown {
  halt
}
}
